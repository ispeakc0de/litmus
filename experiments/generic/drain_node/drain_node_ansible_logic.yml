---
- hosts: localhost
  connection: local

  vars:
    a_label: "{{ lookup('env','APP_LABEL') }}"
    a_ns: "{{ lookup('env','APP_NAMESPACE') }}"
    a_node: "{{ lookup('env','APP_NODE') }}"
    c_experiment: "node-drain"
    liveness_label: "{{ lookup('env','LIVENESS_APP_LABEL') }}"
    liveness_namespace: "{{ lookup('env','LIVENESS_APP_NAMESPACE') }}"
    auxiliary_appinfo: "{{ lookup('env','AUXILIARY_APPINFO') }}"  

  tasks:
    - block:

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''

        # Create test name append with run_id 
        - include_tasks: /utils/runtime/create_testname.yml

        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''

        ## GENERATE EXP RESULT NAME
        - block:

           - name: Construct chaos result name (experiment_name)
             set_fact:
               c_experiment: "{{ lookup('env','CHAOSENGINE') }}-{{ c_experiment }}"

          when: lookup('env','CHAOSENGINE') 

         ## RECORD START-OF-TEST IN CHAOS RESULT CR

        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ a_ns }}"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ a_ns }}"
              - "Label        : {{ a_label }}"
              - "Node name    : {{ a_node }}"

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:  
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}"      
            delay: 5
            retries: 60
        
        # Auxiliary application health check status
        - block:
           
            - name: Record auxiliary appinfo 
              set_fact:
                auxiliary_appinfo_list: "{{ auxiliary_appinfo.split(',') }}"
    
            - include: /utils/common/status_app_pod.yml
              vars:
                app_ns: "{{ item.split(':')[0] }}"
                app_label: "{{ item.split(':')[1] }}"
                delay: 5
                retries: 60
              with_items:
                - "{{ auxiliary_appinfo_list }}" 
                
          when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

        ## STORAGE FAULT INJECTION 

        - include_tasks: /chaoslib/litmus/cordon_drain_node.yaml
          vars:
            action: "drain"      
            app_ns: "{{ a_ns }}"
            app_node: "{{ a_node }}"

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}" 
            delay: 5
            retries: 60

        # Auxiliary application health check status
        - block:
    
          - include: /utils/common/status_app_pod.yml
            vars:
              app_ns: "{{ item.split(':')[0] }}"
              app_label: "{{ item.split(':')[1] }}"
              delay: 5
              retries: 60
            with_items:
              - "{{ auxiliary_appinfo_list }}" 
              
          when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''
        
        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        - name: Uncordon the application node
          include_tasks: "/chaoslib/litmus/cordon_drain_node.yaml"
          vars:
            action: "uncordon"    
            app_node: "{{ a_node }}"  
          
         ## RECORD END-OF-TEST IN CHAOS RESULT CR    
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ a_ns }}"
      