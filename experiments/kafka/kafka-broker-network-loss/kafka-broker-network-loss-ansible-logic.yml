---
- hosts: localhost
  connection: local

  vars:
    c_experiment: "kafka-broker-network-loss"
    c_duration: "{{ lookup('env','TOTAL_CHAOS_DURATION') }}"
    c_container: "{{ lookup('env','TARGET_CONTAINER') }}"
    n_packet_loss: "{{ lookup('env','NETWORK_PACKET_LOSS_PERCENTAGE') }}"
    n_interface: "{{ lookup('env','NETWORK_INTERFACE') }}"
    c_lib: "{{ lookup('env','LIB') }}"
    lib_image: "{{ lookup('env','LIB_IMAGE') }}"
    kafka_instance: "{{ lookup('env','KAFKA_INSTANCE_NAME') }}"
    kafka_ns: "{{ lookup('env','KAFKA_NAMESPACE') }}"
    kafka_label: "{{ lookup('env','KAFKA_LABEL') }}"
    kafka_kind: "{{ lookup('env','KAFKA_KIND') }}"
    kafka_broker: "{{ lookup('env','KAFKA_BROKER') }}"
    kafka_stream: "{{ lookup('env','KAFKA_LIVENESS_STREAM') }}" 
    kafka_liveness_image: "{{ lookup('env','KAFKA_LIVENESS_IMAGE') }}" 
    kafka_consumer_timeout: "{{ lookup('env','KAFKA_CONSUMER_TIMEOUT') }}" 
    kafka_service: "{{ lookup('env','KAFKA_SERVICE') }}"
    kafka_port: "{{ lookup('env','KAFKA_PORT') }}" 
    kafka_replication_factor: "{{ lookup('env','KAFKA_REPLICATION_FACTOR') }}" 
    zk_ns: "{{ lookup('env','ZOOKEEPER_NAMESPACE') }}"
    zk_label: "{{ lookup('env','ZOOKEEPER_LABEL') }}"
    zk_service: "{{ lookup('env','ZOOKEEPER_SERVICE') }}"
    zk_port: "{{ lookup('env','ZOOKEEPER_PORT') }}" 

  tasks:
    - block:

        - include: kafka-broker-network-loss-ansible-prerequisites.yml 
      
        - include_vars:
            file: chaosutil.yml

        ## GENERATE EXP RESULT NAME
        - block:

            - name: Construct chaos result name (experiment_name)
              set_fact:
                c_experiment: "{{ lookup('env','CHAOSENGINE') }}-{{ c_experiment }}"

          when: lookup('env','CHAOSENGINE')    

        ## RECORD START-OF-EXPERIMENT IN LITMUSCHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ kafka_ns }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify that the Kafka cluster is healthy
          include_tasks: "/utils/apps/kafka/kafka_cluster_health.yml"
          vars:     
            delay: 1
            retries: 60

        ## SETUP KAFKA CHAOS INFRA AND DERIVE BROKERS UNDER TEST
       
        - include_tasks: "{{ kafka_broker_util }}" 

        ## FAULT INJECTION 

        - include_tasks: "{{ c_util }}"
          vars:
            a_ns: "{{ kafka_ns }}"
            a_label: "{{ kafka_label }}"
            app_ns: "{{ kafka_ns }}"
            
            # derived from the 'kafka_broker_util' task
            app_pod: "{{ kafka_broker }}" 
          
        ## POST-CHAOS APPLICATION LIVENESS CHECK
        
        - name: Verify that the Kafka cluster is healthy
          include_tasks: "/utils/apps/kafka/kafka_cluster_health.yml"
          vars:     
            delay: 1
            retries: 60

        ## CHECK FOR KAFKA LIVENESS & CLEANUP

        - block: 

            - name: Verify that the Kafka liveness pod (pub-sub) is uninterrupted
              include_tasks: "/utils/common/status_app_pod.yml"
              vars: 
                app_ns: "{{ kafka_ns }}"
                app_label: "name=kafka-liveness" 
                delay: 1
                retries: 60

            - include_tasks: "/utils/apps/kafka/kafka_liveness_cleanup.yml"

          when: kafka_stream is defined and kafka_stream == 'enabled'

        - set_fact:
            flag: "pass"


      rescue: 
        - set_fact: 
            flag: "fail"

        - name: Cleanup kafka liveness pods if present
          include_tasks: "/utils/apps/kafka/kafka_liveness_cleanup.yml"
          ignore_errors: true

      always: 
 
        ## RECORD END-OF-TEST IN LITMUSCHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ kafka_ns }}"

