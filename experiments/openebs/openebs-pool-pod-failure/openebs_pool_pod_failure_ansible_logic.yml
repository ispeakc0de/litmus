---
- hosts: localhost
  connection: local

  vars:
    a_label: "{{ lookup('env','APP_LABEL') }}"
    a_ns: "{{ lookup('env','APP_NAMESPACE') }}"
    a_pvc: "{{ lookup('env','APP_PVC') }}"
    c_duration: 600
    c_interval: 5
    c_engine: "{{ lookup('env','CHAOSENGINE') }}"
    c_experiment: openebs-pool-pod-failure
    c_force: "{{ lookup('env','FORCE') }}"
    c_iterations: "{{ lookup('env','CHAOS_ITERATIONS') }}"
    data_persistence: "{{ lookup('env','DATA_PERSISTENCE') }}"
    liveness_label: "{{ lookup('env','LIVENESS_APP_LABEL') }}"
    liveness_namespace: "{{ lookup('env','LIVENESS_APP_NAMESPACE') }}"
    openebs_ns: openebs
    pool_debug_msg: 'uncorrectable I/O failure|suspended|ERROR ZFS event'
   
  vars_files:
    - /mnt/parameters.yml
    - /experiments/openebs/openebs_components.yml

  tasks:
    - block:

         ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''

        - name: Identify the data consistency util to be invoked
          template:
            src: data_persistence.j2
            dest: data_persistence.yml

        - include_vars:
            file: data_persistence.yml

        - name: Record the chaos util path
          set_fact:
            chaos_util_path: "/experiments/openebs/openebs-pool-pod-failure/cstor_pool_delete.yml"

        - name: Record the data consistency util path
          set_fact:
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''

        ## GENERATE EXP RESULT NAME
        - block:

            - name: Construct chaos result name (experiment_name)
              set_fact:
                c_result: "{{ c_engine }}-{{ c_experiment }}"

          when: c_engine != ''

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - include_tasks: /utils/runtime/create_testname.yml

        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ a_ns }}"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ a_ns }}"
              - "Label        : {{ a_label }}"
              - "PVC          : {{ a_pvc }}"  

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Get application pod name 
          shell: >
            kubectl get pods -n {{ a_ns }} -l {{ a_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name 

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}" 
            delay: 5
            retries: 60

        - name: Create some test data 
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'LOAD'
            ns: "{{ a_ns }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''  

        ## STORAGE FAULT INJECTION 

        - include: "{{ chaos_util_path }}"
          error_messages: "{{ pool_debug_msg }}"
          post_chaos_soak_time : "{{ c_duration }}"

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}" 
            delay: 5
            retries: 60
 
        - name: Verify application data persistence  
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'VERIFY'
            ns: "{{ a_ns }}"
            label: "{{ a_label }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != '' 

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ a_ns }} -l {{ a_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: new_app_pod  

        - name: Verify successful database delete
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'DELETE'
            ns: "{{ a_ns }}"
            label: "{{ a_label }}"
            pod_name: "{{ new_app_pod.stdout }}"
          when: data_persistence != '' 

          # Check application liveness post chaos
        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''  

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 
         ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ a_ns }}"
